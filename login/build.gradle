if(ModuleConfig.isModule) {
    apply plugin: "com.android.application"
}else {
    apply plugin: "com.android.library"
}

apply plugin: "org.jetbrains.kotlin.android"
apply plugin: "kotlin-kapt"
apply plugin: "dagger.hilt.android.plugin"

android {
    compileSdk = BuildConfig.COMPILE_SDK

    defaultConfig {
        if(ModuleConfig.isModule)  applicationId = "com.focus617.login"

        minSdk = BuildConfig.MIN_SDK
        targetSdk = BuildConfig.TARGET_SDK
        versionCode = BuildConfig.versionCodeMobile
        versionName = BuildConfig.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    sourceSets {
        main {
            // 应用和库的AndroidManifest文件区分
            if(ModuleConfig.isModule) {
                manifest.srcFile 'src/main/module/AndroidManifest.xml'
            }else {
                manifest.srcFile 'src/main/AndroidManifest.xml'
                java {
                    //排除java/module文件夹下的所有文件
                    exclude '*module'
                }
            }
        }
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility = BuildConfig.javaVersion
        targetCompatibility = BuildConfig.javaVersion
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {
    api project(':core')
    api project(':myAndroidLibrary')

    // Basic
    implementation(
            Jetpack.LEGACY_SUPPORT,

            Jetpack.ANDROIDX_CORE,
            Jetpack.APPCOMPAT,
            Jetpack.MATERIAL,
            Jetpack.CONSTRAINTLAYOUT,
            Jetpack.PREFERENCE,

            // WorkManager
            Jetpack.WORK_RUNTIME_KTX,

            // Lifecycle
            Jetpack.LIFECYCLE_LIVEDATA_KTX,           // ViewModel and LiveData,
            Jetpack.LIFECYCLE_VIEWMODEL_KTX,
            Jetpack.LIFECYCLE_VIEWMODEL_COMPOSE,      // ViewModel utilities for Compose
            Jetpack.LIFECYCLE_VIEWMODEL_SAVEDSTATE,   // Saved state module for ViewModel

            // Navigation
            Jetpack.NAVIGATION_FRAGMENT_KTX,
            Jetpack.NAVIGATION_UI_KTX,

            // Coroutines
            Kotlin.COROUTINES_CORE,
            Kotlin.COROUTINES_ANDROID
    )

    // Log
    implementation(
            Libs.TIMBER,
            Kotlin.KOTLIN_LOGGING,
            Libs.SLF4J
    )

    // Hilt
    implementation(Kotlin.HILT_ANDROID)
    kapt(Kotlin.HILT_ANDROID_COMPILER)

    // Test
    testImplementation(
            Testing.JUNIT,
            Testing.MOCKITO,
            Testing.ROBOLECTRIC,

            // AndroidX Test - JVM testing
            Testing.ANDROIDX_TEST_CORE,

            // AndroidJUnitRunner and JUnit Rules
            Testing.ANDROIDX_TEST_RUNNER,
            Testing.ANDROIDX_TEST_RULE,

            // Coroutines
            Kotlin.COROUTINES_TEST,

            // Assertions
            Testing.ANDROIDX_TEST_JUNIT,
            Testing.ANDROIDX_TEST_TRUTH,
            Testing.HAMCREST,
            Testing.GOOGLE_TRUTH
    )

    //Hilt
    testImplementation(Kotlin.HILT_ANDROID_TESTING)
    kaptTest(Kotlin.HILT_COMPILER)

    // Core library
    androidTestImplementation(
            Testing.ANDROIDX_TEST_CORE,
            Testing.ANDROIDX_CORE_TEST,

            // AndroidJUnitRunner and JUnit Rules
            Testing.ANDROIDX_TEST_RULE,

            // Assertions
            Testing.ANDROIDX_TEST_JUNIT,
            Testing.ANDROIDX_TEST_TRUTH,

            // Espresso dependencies
            Testing.ANDROIDX_TEST_ESPRESSO,

            // Coroutines
            Kotlin.COROUTINES_TEST
    )
}